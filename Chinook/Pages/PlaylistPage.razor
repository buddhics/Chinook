@page "/playlist/{PlaylistId:long}"
@attribute [Authorize]

@using Chinook.Models
@using Chinook.Services
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims;

<h1>Playlist <strong>@Playlist.Name</strong></h1>

@if (!string.IsNullOrWhiteSpace(InfoMessage))
{
    <div class="alert alert-info fade show">
        <div class="d-flex align-items-start">
            <div class="flex-grow-1">
                @InfoMessage
            </div>
            <button type="button" class="btn-close" aria-label="Close" @onclick="CloseInfoMessage"></button>
        </div>
    </div>
}

@if (Playlist == null)
{
     <Loading />
}
else
{
    <table class="table table-striped table-hover table-sm">
        <thead>
            <tr>
                <th>Track</th>
                <th></th>
        </tr>
        </thead>
        <tbody>
            @foreach (var track in Playlist.Tracks)
            {
                <tr>
                    <td>@track.ArtistName - @track.AlbumTitle - @track.TrackName</td>
                    <td>
                        <div class="d-flex">
                            @if (Playlist.Name != "Favorite")
                            {
                                <FavoriteTrackToggle Tracks="@Playlist.Tracks" TrackId="@track.TrackId" InfoMessageChanged="@HandleInfoMessageChanged" />
                            }
                            <a href="#" class="m-1" title="Remove from this playlist" @onclick="@(() => RemoveTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-trash"></i></a>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [Parameter] public long PlaylistId { get; set; }
    [Inject] IDbContextFactory<ChinookContext> DbFactory { get; set; }
    [Inject] IUserService UserService { get; set; }
    [Inject] IPlaylistService PlaylistService { get; set; }
    [CascadingParameter] private Task<AuthenticationState> authenticationState { get; set; }

    private Chinook.ClientModels.Playlist Playlist;
    private string CurrentUserId;
    private string InfoMessage;

    protected override async Task OnInitializedAsync()
    {
        CurrentUserId = await UserService.GetUserIdAsync(authenticationState);

        await InvokeAsync(StateHasChanged);
        var DbContext = await DbFactory.CreateDbContextAsync();

        Playlist = await PlaylistService.GetPlaylistByIdAsync(PlaylistId, CurrentUserId);
    }

    private void HandleInfoMessageChanged(string message)
    {
        InfoMessage = message;
    }

    private void RemoveTrack(long trackId)
    {
        CloseInfoMessage();
    }
    
    private void CloseInfoMessage()
    {
        InfoMessage = "";
    }

}
