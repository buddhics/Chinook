@page "/"
@attribute [Authorize]

@using Chinook.Models
@using Chinook.Services
@using Microsoft.EntityFrameworkCore

@inject IArtistService ArtistService

<PageTitle>Index</PageTitle>

<h1>Artists</h1>

@if (Artists == null)
{
    <Loading />
}
else
{
    @* <input type="text" @bind="SearchQuery" placeholder="Search artist by name" class="form-control mb-2" @oninput="SearchArtists" /> *@
    <input type="text" @bind="SearchQuery" placeholder="Search artist by name" class="form-control mb-2" @oninput="SearchArtists" />
    <table class="table table-striped table-hover table-sm">
        <thead>
            <tr>
                <th>Name</th>
                <th>Number of albums</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var artist in FilteredArtists)
            {
                <tr>
                    <td><a href="Artist/@artist.ArtistId">@artist.Name</a></td>
                    <td>@artist.Albums.Count()</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Artist> Artists;
    private string SearchQuery { get; set; }
    private List<Artist> FilteredArtists { get; set; }
    // private System.Timers.Timer debounceTimer;

    protected override async Task OnInitializedAsync()
    {
        Artists = await ArtistService.GetArtistsAsync();
        FilteredArtists = Artists;
        // debounceTimer = new Timer(500); // 500 milliseconds debounce time
        // debounceTimer.Elapsed += async (sender, e) => await SearchArtists();
    }

    public async Task<List<Album>> GetAlbumsForArtistByArtistId(int artistId)
    {
        return await ArtistService.GetAlbumsForArtistByArtistIdAsync(artistId);
    }

    // private void DebouncedSearch()
    // {
    //     // Dispose of existing timer if it exists
    //     if (debounceTimer != null)
    //     {
    //         debounceTimer.Dispose();
    //     }

    //     // Create a new timer with a 500ms interval
    //     debounceTimer = new System.Timers.Timer(500);
    //     debounceTimer.AutoReset = false; // Set to false to make it one-time
    //     debounceTimer.Elapsed += async (sender, e) =>
    //     {
    //         await SearchArtists(); // Trigger the search
    //         debounceTimer.Dispose(); // Dispose of the timer
    //     };
    //     debounceTimer.Start();
    // }

    private async Task SearchArtists()
    {
        FilteredArtists = string.IsNullOrWhiteSpace(SearchQuery) ? Artists : await ArtistService.SearchArtistsByNameAsync(SearchQuery);
        StateHasChanged();
    }
}
